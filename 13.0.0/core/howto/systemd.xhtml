<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <title>Deploying Twisted with systemd</title>
  </head>

<body>
<h1>Deploying Twisted with <code>systemd</code></h1>

<h2>Introduction</h2>

<p>In this tutorial you will learn how to start a Twisted service
  using <code>systemd</code>.</p>

<p>You will also learn how to start the service using <code>socket
  activation</code>.</p>

<div class="note">
  <p>The examples in this tutorial demonstrate how to
    launch a Twisted web server, but the same techniques apply to any
    Twisted service.</p>
</div>

<h2>Prerequisites</h2>
<dl>
  <dt>Twisted</dt>
  <dd>You will need a version of Twisted >= 12.2 for the socket
    activation section of this tutorial.</dd>
  <dd>This tutorial was written on a Fedora 18 Linux operating system
    with a system wide installation of Twisted and Twisted Web.</dd>
  <dd>If you have installed Twisted locally eg in your home directory
    or in a virtualenv, you will need to modify the paths in some of
    the following examples.</dd>
  <dd>
    <p>Test your Twisted installation by starting a <code>twistd
      web</code> server on TCP port 8080 with the following
      command:</p>
    <pre class="shell">
$ twistd --nodaemon web --port 8080 --path /srv/www/www.example.com/static
2013-01-28 13:21:35+0000 [-] Log opened.
2013-01-28 13:21:35+0000 [-] twistd 12.3.0 (/usr/bin/python 2.7.3) starting up.
2013-01-28 13:21:35+0000 [-] reactor class: twisted.internet.epollreactor.EPollReactor.
2013-01-28 13:21:35+0000 [-] Site starting on 8080
2013-01-28 13:21:35+0000 [-] Starting factory &lt;twisted.web.server.Site instance at 0x7f57eb66efc8&gt;
    </pre>
    <p>This assumes that you have the following static web page in the
      following directory structure:</p>
    <pre class="shell">
# tree /srv/
/srv/
└── www
    └── www.example.com
        └── static
            └── index.html
    </pre>
    <pre class="html">
&lt;!doctype html&gt;
&lt;html lang=en&gt;
  &lt;head&gt;
    &lt;meta charset=utf-8&gt;
    &lt;title&gt;Example Site&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Example Site&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </pre>

    <p>Now try connecting
      to <a href="http://localhost:8080">http://localhost:8080</a> in
      your web browser.</p>
    <p>If you do not see your web page or if <code>twistd</code> didn't start, you
      should investigate and fix the problem before continuing.</p>
  </dd>
</dl>

<h2>Basic Systemd Service Configuration</h2>
<p>The essential configuration file for a <code>systemd</code> service is the
  <a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"><code>systemd.service</code></a>
  file.</p>
<p>Later in this tutorial, you will learn about some other types of
  configuration file, which are used to control when and how your
  service is started.</p>
<p>But we will begin by configuring <code>systemd</code> to start a Twisted web
  server immediately on system boot.</p>
<ol>
  <li>
    <h3>Create a systemd.service file</h3>
    <p>Create
      the <a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"><code>systemd.service</code></a>
      file at <code>/etc/systemd/system/www.example.com.service</code>
      with the following content:</p>
    <a href="listings/systemd/www.example.com.static.service"
    class="listing">/etc/systemd/system/www.example.com.service</a>

    <p>This configuration file contains the following note worthy
      directives:</p>

    <dl>
      <dt>ExecStart</dt>
      <dd>Always include the full path to <code>twistd</code> in case
        you have multiple versions installed.</dd>
      <dd>The <code>--nodaemon</code> flag makes <code>twistd</code>
        run in the foreground. Systemd works best with child processes
        that remain in the foreground.</dd>
      <dd>The <code>--pidfile=</code> flag
        prevents <code>twistd</code> from writing a pidfile. A pidfile
        is not necessary when Twisted runs as a foreground
        process.</dd>
      <dd>The <code>--path</code> flag specifies the location of
        the website files. In this example we use <q>.</q> which
        makes <code>twistd</code> serve files from its current working
        directory (see below).</dd>

      <dt>WorkingDirectory</dt>
      <dd>Systemd can configure the working environment of its child
        processes.</dd>
      <dd>In this example the working directory of <code>twistd</code>
        is set to that of the static website.</dd>

      <dt>User / Group</dt>
      <dd>Systemd can also control the effective user and group of its
        child processes.</dd>
      <dd>This example uses an un-privileged user <q>nobody</q> and
        un-privileged group <q>nobody</q>.</dd>
      <dd>This is an important security measure which ensures that the
        Twisted sub-process can not access restricted areas of the
        file system.</dd>

      <dt>Restart</dt>
      <dd>Systemd can automatically restart a child process if it
        exits or crashes unexpectedly.</dd>
      <dd>In this example the <code>Restart</code> option is set
        to <code>always</code>, which ensures that <code>twistd</code> will be
        restarted under all circumstances.</dd>

      <dt>WantedBy</dt>
      <dd>Systemd service dependencies are controlled by
        <code>WantedBy</code> and <code>RequiredBy</code> directives
        in the <code>[Install]</code> section of configuration
        file.</dd>
      <dd>The <a href="http://www.freedesktop.org/software/systemd/man/systemd.special.html">special
        <code>multi-user.target</code></a> is used in this example so
        that <code>systemd</code> starts the <code>twistd web</code>
        service when it reaches the multi-user stage of the boot
        sequence.</dd>
    </dl>

    <p>There are many more service directives which are documented in the
      <a href="http://www.freedesktop.org/software/systemd/man/systemd.directives.html"><code>systemd.directives
      man page</code></a>.</p>
  </li>

  <li>
    <h3>Reload <code>systemd</code></h3>
    <pre class="shell">
$ sudo systemctl daemon-reload
    </pre>
    <p>This forces <code>systemd</code> to read the new configuration
      file.</p>
    <p class="note">Always run <code>systemctl daemon-reload</code>
      after changing any of the <code>systemd</code> configuration files.</p>
  </li>
  <li>
    <h3>Start the service</h3>
    <pre class="shell">
$ sudo systemctl start www.example.com
    </pre>

    <p><code>twistd</code> should now be running and listening on TCP
      port 8080. You can verify this using the <code>systemctl status</code>
      command. eg</p>
    <pre class="shell">
$ systemctl status www.example.com.service
www.example.com.service - Example Web Server
          Loaded: loaded (/etc/systemd/system/www.example.com.service; enabled)
          Active: active (running) since Mon 2013-01-28 16:16:26 GMT; 1s ago
        Main PID: 10695 (twistd)
          CGroup: name=systemd:/system/www.example.com.service
                  └─10695 /usr/bin/python /usr/bin/twistd --nodaemon --pidfile= web --port 8080 --path .

Jan 28 16:16:26 zorin.lan systemd[1]: Starting Example Web Server...
Jan 28 16:16:26 zorin.lan systemd[1]: Started Example Web Server.
Jan 28 16:16:26 zorin.lan twistd[10695]: 2013-01-28 16:16:26+0000 [-] Log opened.
Jan 28 16:16:26 zorin.lan twistd[10695]: 2013-01-28 16:16:26+0000 [-] twistd 12.1.0 (/usr/bin/python 2.7.3) starting up.
Jan 28 16:16:26 zorin.lan twistd[10695]: 2013-01-28 16:16:26+0000 [-] reactor class: twisted.internet.epollreactor.EPollReactor.
Jan 28 16:16:26 zorin.lan twistd[10695]: 2013-01-28 16:16:26+0000 [-] Site starting on 8080
Jan 28 16:16:26 zorin.lan twistd[10695]: 2013-01-28 16:16:26+0000 [-] Starting factory &lt;twisted.web.server.Site instance at 0x159b758&gt;
    </pre>
    <p>The <code>systemctl status</code> command is convenient because
      it shows you both the current status of the service and a short
      log of the service output.</p>
    <p>This is especially useful for debugging and diagnosing service
      startup problems.</p>
    <p>The <code>twistd</code> subprocess will log messages
      to <code>stderr</code> and <code>systemd</code> will log
      these messages to syslog. You can verify this by monitoring the
      syslog messages or by using the new <code>journalctl</code> tool
      in Fedora.</p>
    <p>See
      the <a href="http://www.freedesktop.org/software/systemd/man/systemctl.html"><code>systemctl</code>
      man page</a> for details of other <code>systemctl</code> command
      line options.</p>
  </li>
  <li>
    <h3>Enable the service</h3>
    <p>We've seen how to start the service manually, but now we need
      to <q>enable</q> it so that it starts automatically at boot
      time.</p>
    <p>Enable the service with the following command:</p>
    <pre class="shell">
$ sudo systemctl enable www.example.com.service
ln -s '/etc/systemd/system/www.example.com.service' '/etc/systemd/system/multi-user.target.wants/www.example.com.service'
    </pre>
    <p>This creates a symlink to the service file in
      the <code>multi-user.target.wants</code> directory.</p>
    <p>The Twisted web server will now be started automatically at
      boot time.</p>
    <p class="note">The <code>multi-user.target</code> is an example
      of
      a <a href="http://www.freedesktop.org/software/systemd/man/systemd.special.html"><q>special</q>
      systemd unit</a>. Later in this tutorial you will learn how to
      use another special unit - the <code>sockets.target</code>.</p>
  </li>

  <li>
    <h3>Test that the service is automatically restarted</h3>
    <p>The <code>Restart=always</code> option in
      the <code>systemd.service</code> file ensures that <code>systemd</code> will
      restart the <code>twistd</code> process if and when it exits
      unexpectedly.</p>
    <p>You can read about other <code>Restart</code> options in
      the <a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"><code>systemd.service</code>
      man page.</a></p>
    <p>Try killing the <code>twistd</code> process and then checking its status
      again:</p>
    <pre class="shell">
$ sudo kill 12543

$ systemctl status www.example.com.service
www.example.com.service - Example Web Server
          Loaded: loaded (/etc/systemd/system/www.example.com.service; disabled)
          Active: active (running) since Mon 2013-01-28 17:47:37 GMT; 1s ago
        Main PID: 12611 (twistd)
    </pre>
    <p>The <q>Active</q> time stamp shows that the <code>twistd</code> process was
      restarted within 1 second.</p>
  </li>

  <li>
    <p>Now stop the service before you proceed to the next
      section.</p>
    <pre class="shell">
$ sudo systemctl stop www.example.com.service

$ systemctl status www.example.com.service
www.example.com.service - Example Web Server
          Loaded: loaded (/etc/systemd/system/www.example.com.service; enabled)
          Active: inactive (dead) since Mon 2013-01-28 16:51:12 GMT; 1s ago
         Process: 10695 ExecStart=/usr/bin/twistd --nodaemon --pidfile= web --port 8080 --path . (code=exited, status=0/SUCCESS)
    </pre>
  </li>
</ol>

<h2>Socket Activation</h2>
<p>First you need to understand what <q>socket activation</q> is. This
  extract from
  the <a href="http://www.freedesktop.org/software/systemd/man/daemon.html">systemd
  daemon man page</a> explains it quite clearly.</p>

<blockquote>In a socket-based activation scheme the creation and
  binding of the listening socket as primary communication channel of
  daemons to local (and sometimes remote) clients is moved out of the
  daemon code and into the init system.</blockquote>

<blockquote>Based on per-daemon configuration the init system installs
  the sockets and then hands them off to the spawned process as soon
  as the respective daemon is to be started.</blockquote>

<blockquote>Optionally activation of the service can be delayed until the first
  inbound traffic arrives at the socket, to implement on-demand
  activation of daemons.</blockquote>

<blockquote>However, the primary advantage of this scheme is that all providers
  and all consumers of the sockets can be started in parallel as soon
  as all sockets are established.</blockquote>

<blockquote>In addition to that daemons can be restarted with losing only a
  minimal number of client transactions or even any client request at
  all (the latter is particularly true for state-less protocols, such
  as DNS or syslog), because the socket stays bound and accessible
  during the restart, and all requests are queued while the daemon
  cannot process them.</blockquote>

<p>Another benefit of socket activation is that <code>systemd</code>
  can listen on privileged ports and start Twisted with privileges
  already dropped. This allows a Twisted service to be configured
  and restarted by a non-root user.</p>

<p>Twisted (since version 12.2) includes
  a <a href="endpoints.html"><code>systemd</code> endpoint API and a corresponding
  string ports syntax</a>, which allows a Twisted service to inherit a
  listening socket from <code>systemd</code>.</p>
<p>The following example builds on the previous example, demonstrating
  how to enable socket activation for a simple Twisted web server.</p>

<div class="note">
  <p>Before continuing, stop the previous example service with the
    following command:</p>

  <pre class="shell">
$ sudo systemctl stop www.example.com.service
  </pre>
</div>

<ol>
  <li>
    <h3>Create a systemd.socket file</h3>
    <p>Create
      the <a href="http://www.freedesktop.org/software/systemd/man/systemd.socket.html"><code>systemd.socket</code></a>
      file at <code>/etc/systemd/system/www.example.com.socket</code>
      with the following content:</p>
    <a href="listings/systemd/www.example.com.socket"
       class="listing">/etc/systemd/system/www.example.com.socket</a>

    <p>This configuration file contains the following important
      directives:</p>
    <dl>
      <dt>ListenStream=0.0.0.0:80</dt>
      <dd>This option configures <code>systemd</code> to create a
        listening TCP socket bound to all local IPv4 addresses on port
        80.</dd>
      <dt>WantedBy=sockets.target</dt>
      <dd>This is
        a <a href="http://www.freedesktop.org/software/systemd/man/systemd.special.html">special
        target</a> used by all socket activated
        services. <code>systemd</code> will automatically bind to all
        such socket activation ports during boot up.</dd>
    </dl>

    <p>You also need to modify the <code>systemd.service</code> file as
    follows:</p>
    <a href="listings/systemd/www.example.com.socketactivated.service"
       class="listing">/etc/systemd/system/www.example.com.service</a>
    <p>Note the following important directives and changes:</p>
    <dl>
      <dt>ExecStart</dt>
      <dd>The <code>domain=INET</code> endpoint argument makes <code>twistd</code>
        treat the inherited file descriptor as an IPv4 socket.</dd>
      <dd>The <code>index=0</code> endpoint argument
        makes <code>twistd</code> adopt the first file descriptor
        inherited from <code>systemd</code>.</dd>
      <dd class="note">Socket activation is also technically possible
        with other socket families and types, but Twisted currently
        only accepts IPv4 and IPv6 TCP
        sockets. See <a href="#limitations">limitations</a>
        below.</dd>

      <dt>NonBlocking</dt>
      <dd>This must be set to <code>true</code> to ensure that <code>systemd</code>
        passes non-blocking sockets to Twisted.</dd>

      <dt><del>[Install]</del></dt>
      <dd>In this example, the <code>[Install]</code> section has been
        moved to the socket configuration file.</dd>
    </dl>
    <p>Reload <code>systemd</code> so that it reads the updated
      configuration files.</p>
    <pre class="shell">
$ sudo systemctl daemon-reload
    </pre>
  </li>

  <li>
    <h3>Start and enable the socket</h3>
    <p>You can now start <code>systemd</code> listening on the socket with the
      following command:</p>
    <pre class="shell">
$ sudo systemctl start www.example.com.socket
    </pre>
    <p class="note">This command refers specifically to the socket
    configuration file, <strong>not</strong> the service file.</p>
    <p><code>systemd</code> should now be listening on port 80</p>
    <pre class="shell">
$ systemctl status www.example.com.socket
www.example.com.socket
          Loaded: loaded (/etc/systemd/system/www.example.com.socket; disabled)
          Active: active (listening) since Tue 2013-01-29 14:53:17 GMT; 7s ago

Jan 29 14:53:17 zorin.lan systemd[1]: Listening on www.example.com.socket.
    </pre>

    <p>But <code>twistd</code> should not yet have started. You can verify this
      using the <code>systemctl</code> command. eg</p>
    <pre class="shell">
$ systemctl status www.example.com.service
www.example.com.service - Example Web Server
          Loaded: loaded (/etc/systemd/system/www.example.com.service; static)
          Active: inactive (dead) since Tue 2013-01-29 14:48:42 GMT; 6min ago
    </pre>

    <p>Enable the socket, so that it will be started automatically
      with the other socket activated services during boot up.</p>
    <pre class="shell">
$ sudo systemctl enable www.example.com.socket
ln -s '/etc/systemd/system/www.example.com.socket' '/etc/systemd/system/sockets.target.wants/www.example.com.socket'
    </pre>
  </li>
  <li>
    <h3>Activate the port to start the service</h3>

    <p>Now try connecting
      to <a href="http://localhost:80">http://localhost:80</a> in
      your web browser.</p>

    <p><code>systemd</code> will accept the connection and
      start <code>twistd</code>, passing it the listening socket. You
      can verify this by using systemctl to report the status of the
      service. eg</p>
    <pre class="shell">
$ systemctl status www.example.com.service
www.example.com.service - Example Web Server
          Loaded: loaded (/etc/systemd/system/www.example.com.service; static)
          Active: active (running) since Tue 2013-01-29 15:02:20 GMT; 3s ago
        Main PID: 25605 (twistd)
          CGroup: name=systemd:/system/www.example.com.service
                  └─25605 /usr/bin/python /usr/bin/twistd --nodaemon --pidfile= web --port systemd:domain=INET:index=0 --path .

Jan 29 15:02:20 zorin.lan systemd[1]: Started Example Web Server.
Jan 29 15:02:20 zorin.lan twistd[25605]: 2013-01-29 15:02:20+0000 [-] Log opened.
Jan 29 15:02:20 zorin.lan twistd[25605]: 2013-01-29 15:02:20+0000 [-] twistd 12.1.0 (/usr/bin/python 2.7.3) starting up.
Jan 29 15:02:20 zorin.lan twistd[25605]: 2013-01-29 15:02:20+0000 [-] reactor class: twisted.internet.epollreactor.EPollReactor.
Jan 29 15:02:20 zorin.lan twistd[25605]: 2013-01-29 15:02:20+0000 [-] Site starting on 80
Jan 29 15:02:20 zorin.lan twistd[25605]: 2013-01-29 15:02:20+0000 [-] Starting factory &lt;twisted.web.server.Site instance at 0x24be758&gt;
    </pre>
  </li>
</ol>

<h2>Conclusion</h2>
<p>In this tutorial you have learned how to deploy a Twisted service
  using <code>systemd</code>. You have also learned how the service can be started
  on demand, using socket activation.</p>

<h2 id="limitations">Limitations and Known Issues</h2>
<ol>
  <li>Twisted can not accept UNIX or datagram sockets
    from <code>systemd</code>.</li>
  <li>Twisted does not support listening for SSL connections on
    sockets inherited from <code>systemd</code>.</li>
</ol>
<h2>Further Reading</h2>
<ul>
  <li><a href="http://www.freedesktop.org/wiki/Software/systemd/"><code>systemd</code>
      Documentation</a></li>
</ul>
</body>
</html>
