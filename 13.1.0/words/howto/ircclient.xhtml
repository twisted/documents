<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>
      Using the Twisted IRC Client
    </title>
  </head>
  <body>
    <h1>
      Using the Twisted IRC Client
    </h1>

    <p>
      A complete howto would explain how to actually use the IRC client.
      However, until that howto is written, here is a howto that explains how
      to do text formatting for IRC.
    </p>

    <h2>
      Text formatting
    </h2>

    <p>
      The text formatting support in Twisted Words is based on the widely used
      <a href="http://www.mirc.com/">mIRC</a> format which supports bold,
      underline, reverse video and colored text; nesting these attributes is
      also supported.
    </p>

    <h3>
      Creating formatted text
    </h3>

    <p>
      The API used for creating formatted text in the IRC client is almost the
      same as that used by
      Twisted <code class="API" base="twisted.conch">insults</code>.
      Text attributes are built up by accessing and indexing attributes on
      a special module-level attribute,
      <code class="API">twisted.words.protocols.irc.attributes</code>,
      multiple values can be passed when indexing attributes to mix text with
      nested text attributes. The resulting object can then be serialized to
      formatted text, with
      <code class="API">twisted.words.protocols.irc.assembleFormattedText</code>,
      suitable for use with any of the IRC client messaging functions.
    </p>

    <h3>
        Bold, underline and reverse video attributes
    </h3>

    <p>
      Bold, underline and reverse video attributes are just flags and are the
      simplest text attributes to apply. They are accessed by the names
      <code>bold</code>, <code>underline</code> and <code>reverseVideo</code>,
      respectively, on
      <code class="API">twisted.words.protocols.irc.attributes</code>. For
      example, messaging someone the bold and underlined text "Hello world!":

      <pre class="python">
from twisted.words.protocols.irc import assembleFormattedText, attributes as A

# Message "someone" the bold and underlined text "Hello world!"
anIRCClient.msg('someone', assembleFormattedText(
    A.bold[
        A.underline['Hello world!']])
      </pre>
    </p>

    <h3>
      The "normal" attribute
    </h3>

    <p>
      At first glance a text attribute called "normal" that does not apply any
      unusual text attributes may not seem that special but it can be quite
      useful, both as a container:

      <pre class="python">
A.normal[
    'This is normal text. ',
    A.bold['This is bold text! '],
    'Back to normal',
    A.underline['This is underlined text!']]
      </pre>

      And also as a way to temporarily disable text attributes without having to
      close and respecify all text attributes for a brief piece of text:

      <pre class="python">
A.normal[
    A.reverseVideo['This is reverse, ', A.normal['except for this'], ', text']]
      </pre>

      It is worth noting that assembled text will always begin with the control
      code to disable other attributes for the sake of correctness.
    </p>

    <h3>
      Color attributes
    </h3>

    <p>
      Since colors for both the foreground and background can be specified with
      IRC text formatting another level of attribute access is introduced.
      Firstly the foreground or background, through the
      <code>fg</code> and <code>bg</code> attribute names respectively, is
      accessed and then the color name is accessed. The available color
      attribute names are:
    </p>

    <ul>
       <li>white</li>
       <li>black</li>
       <li>blue</li>
       <li>green</li>
       <li>lightRed</li>
       <li>red</li>
       <li>magenta</li>
       <li>orange</li>
       <li>yellow</li>
       <li>lightGreen</li>
       <li>cyan</li>
       <li>lightCyan</li>
       <li>lightBlue</li>
       <li>lightMagenta</li>
       <li>gray</li>
       <li>lightGray</li>
    </ul>

    <p>
      It is possible to nest foreground and background colors to alter both
      for a single piece of text. For example to display black on green text:

      <pre class="python">
A.fg.black[A.bg.green['Like a terminal!']]
      </pre>
    </p>

    <h3>
      Parsing formatted text
    </h3>

    <p>
      Most IRC clients format text so it is logical that you may want to parse
      this formatted text.
      <code class="API">twisted.words.protocols.irc.parseFormattedText</code>
      will parse text into structured text attributes. It is worth noting that
      while feeding the output of <code>parseFormattedText</code> back to
      <code>assembleFormattedText</code> will produce the same final result,
      the actual structure of the parsed text will differ. Color codes are
      mapped from 0 to 15, codes greater than 15 will begin to wrap around.
    </p>

    <h3>
      Removing formatting
    </h3>

    <p>
      In some cases, such as an automaton handling user input from IRC, it is
      desirable to have all formatting stripped from text. This can be
      accomplished with
      <code class="API">twisted.words.protocols.irc.stripFormatting</code>.
    </p>
  </body>
</html>
