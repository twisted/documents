<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Introduction to Deferreds</title>
</head>

<body>

<h1>Introduction to Deferreds</h1>

<p>
  This document introduces <code base="twisted.internet.defer"
  class="API">Deferred</code>s, Twisted's preferred mechanism for controlling
  the flow of asynchronous code.  Don't worry if you don't know what that means
  yet&mdash;that's why you are here!
</p>

<p>
  It is intended for newcomers to Twisted, and was written particularly to help
  people read and understand code that already uses
  <code base="twisted.internet.defer" class="API">Deferred</code>s.
</p>

<p>
  This document assumes you have a good working knowledge of Python.  It
  assumes no knowledge of Twisted.
</p>

<p>
  By the end of the document, you should understand
  what <code base="twisted.internet.defer" class="API">Deferred</code>s are and
  how they can be used to coordinate asynchronous code.  In particular, you
  should be able to:

  <ul>
    <li>Read and understand code that uses <code base="twisted.internet.defer"
    class="API">Deferred</code>s</li>
    <li>Translate from synchronous code to asynchronous code and back
    again</li>
    <li>Implement any sort of error-handling for asynchronous code that you
    wish</li>
  </ul>
</p>

<h2>The joy of order</h2>

<p>
  When you write Python code, one prevailing, deep, unassailled assumption is
  that a line of code within a block is only ever executed after the preceding
  line is finished.
</p>

<pre class="python">
pod_bay_doors.open()
pod.launch()
</pre>

<p>
  The pod bay doors open, and only <em>then</em> does the pod launch.  That's
  wonderful.  One-line-after-another is a built-in mechanism in the language
  for encoding the order of execution.  It's clear, terse, and unambiguous.
</p>

<p>
  Exceptions make things more complicated.  If
  <code class="python">pod_bay_doors.open()</code> raises an exception, then
  we cannot know with certainty that it completed, and so it would be wrong to
  proceed blithely to the next line.  Thus, Python gives us
  <code class="python">try</code>, <code class="python">except</code>,
  <code class="python">finally</code> and <code class="python">else</code>,
  which together model almost every conceivable way of handling a raised
  exception, and tend to work really well.
</p>

<p>
  Function application is the other way we encode order of execution:
</p>

<pre class="python">
  pprint(sorted(x.get_names()))
</pre>

<p>
  First <code class="python">x.get_names()</code> gets called,
  then <code class="python">sorted</code> is called with its return value, and
  then <code class="python">pprint</code> with
  whatever <code class="python">sorted</code> returns.  It can also be written
  as:
</p>

<pre class="python">
names = x.get_names()
sorted_names = sorted(names)
pprint(sorted_names)
</pre>

<p>
  Sometimes it leads us to encode the order when we don't need to, as in this
  example:
</p>

<pre class="python">
total = 0
for account in accounts:
    total += account.get_balance()
print "Total balance $%s" % (total,)
</pre>

<p>
  But that's normally not such a big deal.
</p>

<p>
  All in all, things are pretty good, and all of the explanation above is
  laboring familiar and obvious points.  One line comes after another and one
  thing happens after another, and both facts are inextricably tied.
</p>

<p>
  But what if we had to do it differently?
</p>


<h2>A hypothetical problem</h2>

<p>
  What if we could no longer rely on the previous line of code being finished
  (whatever that means) before we started to interpret &amp; execute the next
  line of code?  What if <code class="python">pod_bay_doors.open()</code>
  returned immediately, triggering something somewhere else that would
  eventually open the pod bay doors, recklessly sending the Python interpreter
  plunging into <code class="python">pod.launch()</code>?
</p>

<p>
  That is, what would we do if the order of execution did not match the order
  of lines of Python?  If <q>returning</q> no longer meant <q>finishing</q>?
</p>

<p>
  <!-- XXX: Not sure if 'em' is the correct markup for first use of a technical
  term - jml -->

  In other words, how can we deal with <em>asynchronous
  operations</em>?
</p>

<p>
  How would we prevent our pod from hurtling into the still-closed doors?  How
  could we respond to a potential failure to open the doors at all?  What if
  opening the doors gave us some crucial information that we needed in order
  to launch the pod?  How would we get access to that information?
</p>

<p>
  And, crucially, since we are writing code, how can we write our code so that
  we can build <em>other</em> code on top of it?
</p>


<h2>The components of a solution</h2>

<p>
  We would still need a way of saying <q>do <em>this</em> only
  when <em>that</em> has finished</q>.
</p>

<p>
  We would need a way of distinguishing between successful completion and
  interrupted processing, normally modeled with <code class="python">try</code>,
  <code class="python">expect</code>, <code class="python">else</code>, and
  <code class="python">finally</code>.
</p>

<p>
  We need a mechanism for getting return failures and exception information
  from the thing that just executed to the thing that needs to happen next.
</p>

<p>
  We need somehow to be able to operate on results that we don't have yet.
  Instead of acting, we need to make and encode plans for how we would act if
  we could.
</p>

<p>
  Unless we hack the interpreter somehow, we would need to build this with the
  Python language constructs we are given: methods, functions, objects, and the
  like.
</p>

<p>
  Perhaps we want something that looks a little like this:
</p>

<pre class="python">
placeholder = pod_bay_doors.open()
placeholder.when_done(pod.launch)
</pre>

<h2>One solution: Deferred</h2>

<p>
  Twisted tackles this problem with
  <code class="API" base="twisted.internet.defer">Deferred</code>s,
  a type of object designed to do one thing, and one thing only: encode an
  order of execution separately from the order of lines in Python source code.
</p>

<p>
  It doesn't deal with threads, parallelism, signals, or subprocesses.  It
  doesn't know anything about an event loop, greenlets, or scheduling.  All it
  knows about is what order to do things in.  How does it know that?  Because
  we explicitly tell it the order that we want.
</p>

<p>
  Thus, instead of writing:
</p>

<pre class="python">
pod_bay_doors.open()
pod.launch()
</pre>

<p>
  We write:
</p>

<pre class="python">
d = pod_bay_doors.open()
d.addCallback(lambda ignored: pod.launch())
</pre>

<p>
  That introduced a dozen new concepts in a couple of lines of code, so let's
  break it down.  If you think you've got it, you might want to skip to the
  next section.
</p>

<p>
  Here, <code class="python">pod_bay_doors.open()</code> is returning a
  <code class="API" base="twisted.internet.defer">Deferred</code>, which we
  assign to <code class="python">d</code>.  We can think
  of <code class="python">d</code> as a placeholder, representing the value
  that <code class="python">open()</code> will eventually return when it
  finally gets around to finishing.
</p>

<p>
  <!-- XXX: Again, em for first use technical term. -->
  To say <q>do this next</q>, we add a <em>callback</em> to
  <code class="python">d</code>.  A callback is a function that will be called
  with whatever <code class="python">open()</code> eventually returns.  In this
  case, we don't care, so we make a function with a single, ignored parameter
  that just calls <code class="python">pod.launch()</code>.
</p>

<p>
  So, we've replaced the <q>order of lines is order of execution</q> with a
  deliberate, in-Python encoding of the order of execution,
  where <code class="python">d</code> represents the particular flow and
  <code class="python">d.addCallback</code> replaces <q>new line</q>.
</p>

<p>
  Of course, programs generally consist of more than two lines, and we still 
  don't know how to deal with failure.
</p>

<h2>Getting it right: The failure cases</h2>

<p>
  In what follows, we are going to take each way of expressing order of
  operations in normal Python (using lines of code and and 
  <code class="python">try</code>/<code class="python">except</code>) and
  translate them into an equivalent code built with <code class="API"
  base="twisted.internet.defer">Deferred</code> objects.
</p>

<p>
  This is going to be a bit painstaking, but if you want to really understand
  how to use <code class="API" base="twisted.internet.defer">Deferred</code>s
  and maintain code that uses them, it is worth understanding each example
  below.
</p>

<h3>One thing, then another, then another</h3>

<p>
Recall our example from earlier:
</p>

<pre class="python">
pprint(sorted(x.get_names()))
</pre>

<p>Also written as:</p>

<pre class="python">
names = x.get_names()
sorted_names = sorted(names)
pprint(sorted_names)
</pre>

<p>
  What if neither <code class="python">get_names</code>
  nor <code class="python">sorted</code> can be relied on to finish before they
  return?  That is, if both are asynchronous operations?
</p>

<p>
  Well, in Twisted-speak they would return <code class="API"
  base="twisted.internet.defer">Deferred</code>s and so we would write:
</p>

<pre class="python">
d = x.get_names()
d.addCallback(sorted)
d.addCallback(pprint)
</pre>

<p>
  Eventually, <code class="python">sorted</code> will get called with
  whatever <code class="python">get_names</code> finally delivers.
  When <code class="python">sorted</code>
  finishes, <code class="python">pprint</code> will be called with whatever it
  delivers.
</p>

<p>We could also write this as:</p>

<pre class="python">
x.get_names().addCallback(sorted).addCallback(pprint)
</pre>

<p>
  Since <code class="python">d.addCallback</code>
  returns <code class="python">d</code>.
</p>

<h3>Simple failure handling</h3>

<p>We often want to write code equivalent to this:</p>

<pre class="python">
try:
    x.get_names()
except Exception, e:
    report_error(e)
</pre>

<p>
  How would we write this with <code class="API"
  base="twisted.internet.defer">Deferred</code>s?
</p>

<pre class="python">
d = x.get_names()
d.addErrback(report_error)
</pre>

<p>
  <!-- XXX: em for first use of technical term. -->
  <em>errback</em> is the Twisted name for a callback that is called when an error
  is received.
</p>

<p>
  This glosses over an important detail.  Instead of getting the exception
  object <code class="python">e</code>, <code class="python">report_error</code>
  would get a <code class="API" base="twisted.python.failure">Failure</code>
  object, which has all of the useful information
  that <code class="python">e</code> does, but is optimized for use
  with <code class="API" base="twisted.internet.defer">Deferred</code>s.
</p>

<p>
  We'll dig into that a bit later, after we've dealt with all of the
  other combinations of exceptions.
</p>


<h3>Handle an error, but do something else on success</h3>

<p>
  What if we want to do something after our <code class="python">try</code>
  block if it actually worked?  Abandoning our
  contrived examples and reaching for generic variable names, we get:
</p>

<pre class="python">
try:
    y = f()
except Exception, e:
    g(e)
else:
    h(y)
</pre>

<p>
  Well, we'd write it like this with <code class="API"
  base="twisted.internet.defer">Deferred</code>:
</p>

<pre class="python">
d = f()
d.addCallbacks(h, g)
</pre>

<p>
  Where <code class="python">addCallbacks</code> means <q>add a callback and an
    errback at the same time</q>.
  <code class="python">h</code> is the callback,
  <code class="python">g</code> is the errback.
</p>

<p>
  Now that we have <code class="python">addCallbacks</code> along
  with <code class="python">addErrback</code>
  and <code class="python">addCallback</code>, we can match any possible
  combination
  of <code class="python">try</code>, <code class="python">except</code>, <code class="python">else</code>
  and <code class="python">finally</code> by varying the order in which we call
  them.  Explaining exactly how it works is tricky (although
  the <a href="defer.xhtml">Deferred reference</a> does rather a good job), but
  once we're through all of the examples it ought to be clearer.
</p>

<h3>Handle an error, then proceed anyway</h3>

<p>
  What if we want to do something after
  our <code class="python">try</code>/<code class="python">except</code> block,
  regardless of whether or not there was an exception?  That is, what if we
  wanted to do the equivalent of this generic code:
</p>

<pre class="python">
try:
    y = f()
except Exception, e:
    y = g(e)
h(y)
</pre>

<p>And with <code class="API" base="twisted.internet.defer">Deferred</code>:</p>

<pre class="python">
d = f()
d.addErrback(g)
d.addCallback(h)
</pre>

<p>
  Because <code class="python">addErrback</code>
  returns <code class="python">d</code>, we can chain the calls like so:
</p>

<pre class="python">
f().addErrback(g).addCallback(h)
</pre>

<p>
  The order of <code class="python">addErrback</code>
  and <code class="python">addCallback</code> matters.  In the next section, we
  can see what would happen when we swap them around.
</p>

<h3>Handle an error for the entire operation</h3>

<p>
  What if we want to wrap up a multi-step operation in one exception handler?
</p>

<pre class="python">
try:
    y = f()
    z = h(y)
except Exception, e:
    g(e)
</pre>

<p>
  With <code class="API" base="twisted.internet.defer">Deferred</code>, it
  would look like this:
</p>

<pre class="python">
d = f()
d.addCallback(h)
d.addErrback(g)
</pre>

<p>
Or, more succinctly:
</p>

<pre class="python">
d = f().addCallback(h).addErrback(g)
</pre>


<h3>Do something regardless</h3>

<p>
  What about <code class="python">finally</code>? How do we do something
  regardless of whether or not there was an exception?  How do we translate
  this:
</p>

<pre class="python">
try:
    y = f()
finally:
    g()
</pre>

<p>
  Well, roughly we do this:
</p>

<pre class="python">
d = f()
d.addBoth(g)
</pre>

<p>
  This adds <code class="python">g</code> as both the callback and the errback.
  It is equivalent to:
</p>

<pre class="python">
d.addCallbacks(g, g)
</pre>

<p>
  Why <q>roughly</q>?  Because if <code class="python">f</code>
  raises, <code class="python">g</code> will be passed a <code class="API"
  base="twisted.python.failure">Failure</code> object representing the
  exception.  Otherwise, <code class="python">g</code> will be passed the
  asynchronous equivalent of the return value
  of <code class="python">f()</code> (i.e. <code class="python">y</code>).
</p>

<h2>Conclusion</h2>

<p>
  You have been introduced to asynchronous code and have seen how to
  use <code base="twisted.internet.defer" class="API">Deferred</code>s to:

  <ul>
    <li>Do something after an asynchronous operation completes
    successfully</li>
    <li>Use the result of a successful asynchronous operation</li>
    <li>Catch errors in asynchronous operations</li>
    <li>Do one thing if an operation succeeds, and a different thing if it
      fails</li>
    <li>Do something after an error has been handled successfully</li>
    <li>Wrap multiple asynchronous operations with one error handler</li>
    <li>Do something after an asynchronous operation, regardless of whether it
      succeeded or failed</li>
  </ul>
</p>

<p>
  These are very basic uses of
  <code base="twisted.internet.defer" class="API">Deferred</code>.  For
  detailed information about how they work, how to combine multiple Deferreds,
  and how to write code that mixes synchronous and asynchronous APIs, see
  the <a href="defer.xhtml">Deferred reference</a>.  Alternatively, read
  about how to write functions that <a href="gendefer.xhtml">generate
  Deferreds</a>.
</p>

</body>
</html>
